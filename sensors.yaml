









    
  - platform: template
    sensors:
      ha_uptime:
        friendly_name: HA Uptime
        value_template: >
          {% set uptime_state = states('sensor.uptime') %}
          {% if uptime_state != 'unknown' %}
            {% set up_time = as_timestamp(now()) - as_timestamp(uptime_state) %}
            {% if up_time == 0 %}
              Just restarted...
            {% else %}
              {% set minutes = (up_time // 60) | int %}
              {% set hours = (minutes // 60) %}
              {% set days = (hours // 24) %}
              {% set weeks = (days // 7) %}
              {% set minutes = (minutes % 60) %}
              {% set hours = (hours % 24) %}
              {% set days = (days % 7) %}

              {% macro phrase(value, name) %}
                {%- set value = value %}
                {%- set end = 's' if value > 1 else '' %}
                {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
              {%- endmacro %}

              {% set text = [phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min')] | select('!=','') | list | join(', ') %}
              {% set last_comma = text.rfind(',') %}
              {% if last_comma != -1 %}
                {% set text = text[:last_comma] + ' and' + text[last_comma + 1:] %}
              {% endif %}

              {{ text }}
            {% endif %}
          {% else %}
            Uptime not available
          {% endif %}



      last_boot_date_time:
        friendly_name: Last Boot
        value_template: >
          {% set timestamp = as_timestamp(states('sensor.last_boot')) %}
          {% set date = timestamp | timestamp_custom('%d') %}
          {% set suffix = 'th' if date in ['11', '12', '13'] else {1: 'st', 2: 'nd', 3: 'rd'}.get(date[-1], 'th') %}

          {{ timestamp | timestamp_custom('%H:%M on %a') }} {{ date ~ suffix }} {{ timestamp | timestamp_custom('%b %Y') }}



      rpi_uptime:
        friendly_name: RPi Uptime
        value_template: >
          {% set up_time = as_timestamp(now()) - as_timestamp(states('sensor.last_boot')) %}

          {% set minutes = (up_time // 60) | int %}
          {% set hours = (minutes // 60) %}
          {% set days = (hours // 24) %}
          {% set weeks = (days // 7) %}

          {% set minutes = (minutes % 60) %}
          {% set hours =  (hours % 24) %}
          {% set days = (days % 7) %}

          {% macro phrase(value, name) %}
                    {%- set value = value %}
                    {%- set end = 's' if value > 1 else '' %}
                    {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
          {%- endmacro %}
                    
          {% set text = [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') %}
          {% set last_comma = text.rfind(',') %}
          {% if last_comma != -1 %}
            {% set text = text[:last_comma] + ' and' + text[last_comma + 1:] %}
          {% endif %}
          
          {{ text }}    
          
          
  - platform: template
    sensors:

    #----- Count Automations
      count_automations:
        value_template: "{{ states.automation | list | length }}"

    #----- Count Scripts
      count_scripts:
        value_template: "{{ states.script| list | length }}"

    #----- Count Device Trackers
      count_device_trackers:
        value_template: "{{ states.device_tracker | list | length }}"

    #----- Count Binary Sensors
      count_binary_sensors:
        value_template: "{{ states.binary_sensor| list | length }}"

    #----- Count Sensors
      count_sensors:
        value_template: "{{ states.sensor | list | length }}"

    #----- Count Switches
      count_switches:
        value_template: "{{ states.switch | list | length }}"

    #----- Count Zones
      count_zones:
        value_template: "{{ states.zone | list | length }}"

    #----- Input Booleans
      count_input_booleans:
        value_template: "{{ states.input_boolean | list | length }}"

    #----- Input Numbers
      count_input_numbers:
        value_template: "{{ states.input_number | list | length }}"

    #----- Input Texts
      count_input_texts:
        value_template: "{{ states.input_text | list | length }}"

    #----- Input Selects
      count_input_selects:
        value_template: "{{ states.input_select | list | length }}"

    #----- Input Date Times
      count_input_datetimes:
        value_template: "{{ states.input_datetime | list | length }}"   
        
    #----- Lights
      count_lights:
        value_template: "{{ states.light | list | length }}"   
        

      devices_with_battery_type_aaa:
        friendly_name: "Počet zariadení s batériou AAA"
        value_template: >
          {% set devices = states.sensor | selectattr('attributes.battery_type', 'eq', 'AAA') | list %}
          {{ devices | length }}    

      devices_with_battery_type_cr2032:
        friendly_name: "Počet zariadení s batériou CR2032"
        value_template: >
          {% set devices = states.sensor | selectattr('attributes.battery_type', 'eq', 'CR2032') | list %}
          {{ devices | length }}          
        
        
################################################Spotreba v eur
  - platform: template
    sensors:

     cena_elektriny:
      friendly_name: "Cena Elektriny"
      value_template:  "0.2149912203687445"
      unit_of_measurement: '€'

     tv_dnesna_spotreba:
      friendly_name: "TV Dnesna Spotreba"
      value_template: "{{ (( states('sensor.tv_zasuvka_energy_today')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'
      
     tv_vcerajsia_spotreba:
      friendly_name: "TV Vcerajsia Spotreba"
      value_template: "{{ (( states('sensor.tv_zasuvka_energy_yesterday')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'    
      
     tv_total_spotreba:
      friendly_name: "TV Total Spotreba"
      value_template: "{{ (( states('sensor.tv_zasuvka_energy_total')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'      
      
     obyvacka_predlzovacka_dnesna_spotreba:
      friendly_name: "Predlzovacka Dnesna Spotreba"
      value_template: "{{ (( states('sensor.obyvacka_predlzovackaa_energy_today')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'
      
     obyvacka_predlzovacka_vcerajsia_spotreba:
      friendly_name: "Predlzovacka Vcerajsia Spotreba"
      value_template: "{{ (( states('sensor.obyvacka_predlzovacka_energy_yesterday')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'    
      
     obyvacka_predlzovacka_total_spotreba:
      friendly_name: "Predlzovacka Total Spotreba"
      value_template: "{{ (( states('sensor.obyvacka_predlzovacka_energy_total')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'  
      
     pracovna_dnesna_spotreba:
      friendly_name: "Pracovna Dnesna Spotreba"
      value_template: "{{ (( states('sensor.pracovna_energy_today')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'
      
     pracovna_vcerajsia_spotreba:
      friendly_name: "Pracovna Vcerajsia Spotreba"
      value_template: "{{ (( states('sensor.pracovna_energy_yesterday')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'    
      
     pracovna_total_spotreba:
      friendly_name: "Pracovna Total Spotreba"
      value_template: "{{ (( states('sensor.pracovna_energy_total')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'      

     pracka_dnesna_spotreba:
      friendly_name: "Pracka Dnesna Spotreba"
      value_template: "{{ (( states('sensor.pracka_zasuvka_energy_today')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'      
      
     pracka_total_spotreba:
      friendly_name: "Pracka Total Spotreba"
      value_template: "{{ (( states('sensor.pracka_zasuvka_energy_total')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'  
      
     susicka_dnesna_spotreba:
      friendly_name: "Susicka Dnesna Spotreba"
      value_template: "{{ (( states('sensor.susicka_zasuvka_energy_today_2')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'           
      
     susicka_total_spotreba:
      friendly_name: "Susicka Total Spotreba"
      value_template: "{{ (( states('sensor.susicka_zasuvka_energy_total_2')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'
      
     chladnicka_dnesna_spotreba:
      friendly_name: "Chladnicka Dnesna Spotreba"
      value_template: "{{ (( states('sensor.chladnicka_energy_today')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'
      
     chladnicka_vcerajsia_spotreba:
      friendly_name: "Chladnicka Vcerajsia Spotreba"
      value_template: "{{ (( states('sensor.chladnicka_energy_yesterday')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'    
      
     chladnicka_total_spotreba:
      friendly_name: "Chladnicka Total Spotreba"
      value_template: "{{ (( states('sensor.chladnicka_energy_total')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'  
      
     elektromer_spotreba_start:
      friendly_name: "Elektromer stav od zaciatku pocitania"
      value_template: "6438"
      unit_of_measurement: 'KWH' 
      
     elektromer_spotreba_total:
      friendly_name: "Elektromer total"
      value_template: "{{ ( states('sensor.0x0015bc001b02205d_energy')|float(0) ) + ( states('sensor.elektromer_spotreba_start')|float(0) ) }}"
      unit_of_measurement: 'KWH'       

     elektromer_spotreba_posledne_vyuctovanie:
      friendly_name: "Elektromer stav vyuctovania"
      value_template: "8869"
      unit_of_measurement: 'KWH' 

     elektromer_spotreba_novy_cyklus:
      friendly_name: "Elektromer novy cyklus"
      value_template: "{{ (   ( states('sensor.elektromer_spotreba_total')|float(0) ) - ( states('sensor.elektromer_spotreba_posledne_vyuctovanie')|float(0))   )   | round(2)  }}"
      unit_of_measurement: 'KWH'  
      
     elektromer_spotreba_cena:
      friendly_name: "Elektromer spotreba v cene"
      value_template: "{{ (    ( states('sensor.elektromer_spotreba_novy_cyklus')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))   ) | round(2) }}"
      unit_of_measurement: '€' 
      
     elektromer_spotreba_cena_mesacne:
      friendly_name: "Elektromer cena mesacne"
      value_template: "{{ (( states('sensor.elektromer_spotreba_cena')|float(0) ) /12 ) | round(2) }}"
      unit_of_measurement: '€'   

     rura_dnesna_spotreba:
      friendly_name: "Rura Dnesna Spotreba"
      value_template: "{{ (( states('sensor.rura_zasuvka_energy_today')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'
      
     rura_vcerajsia_spotreba:
      friendly_name: "Rura Vcerajsia Spotreba"
      value_template: "{{ (( states('sensor.rura_zasuvka_energy_yesterday')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'    
      
     rura_total_spotreba:
      friendly_name: "Rura Total Spotreba"
      value_template: "{{ (( states('sensor.rura_zasuvka_energy_total')|float(0) ) *  (states('sensor.cena_elektriny')|float(0))  ) | round(2) }}"
      unit_of_measurement: '€'     
      
          
      
  
     

        
      

################################################ Xiaomi Kettle      

     xiaomi_kettle_state:
      friendly_name: "Kettle stav"
      value_template: >-
        {% if is_state_attr('binary_sensor.ble_switch_ac9a22f296d0', 'status', 'kettle is idle') %}
          Kanvica je vypnuta
        {% elif is_state_attr('binary_sensor.ble_switch_ac9a22f296d0', 'status', 'kettle is heating') %}
          Kanvica zohrieva vodu
        {% elif is_state_attr('binary_sensor.ble_switch_ac9a22f296d0', 'status', 'warming function active with boiling') %}
          Voda zovrela - udrziavam 
        {% else %}
          Failed
        {% endif %}    
        

################################################ Pozicia zaluzii 

     pozicia_zaluzie: 
      friendly_name: "Pozicia zaluzie"
      value_template:  "{{ ((state_attr('cover.0x5c0272fffedfd8a2', 'position'))) }}"
      
################################################ Vysavac

#     vysavac_state:
#      friendly_name: "Vysavac Dnesny stav vysavania"
#      value_template: >-
#        {% if now().strftime('%Y-%m-%d') ==  states('sensor.xiaomi_vacuum_cleaner_last_clean_start') | as_datetime | as_timestamp(default=0) | timestamp_custom('%Y-%m-%d') %}
#          Vysavac dnes vysaval
#       {% else %}
#         Vysavac dnes nevysaval
#        {% endif %}   
        
     vysavac_state:
      friendly_name: "Vysavac Dnesny stav vysavania"
      value_template: >-
        {% set last_clean_start = states('sensor.xiaomi_vacuum_cleaner_last_clean_start') | as_datetime | as_timestamp(default=0) %}
        {% set today_start = now().replace(hour=0, minute=0, second=0, microsecond=0) | as_timestamp %}
        {% set vacuum_runtime_today = states('sensor.xiaomi_vacuum_cleaner_last_clean_duration') %}
        {{ 'Vysavac dnes vysaval' if last_clean_start >= today_start and vacuum_runtime_today != 'unknown' and vacuum_runtime_today | int > 300 else 'Vysavac dnes nevysaval' }}
        
        
     vysavac_dlzka_vysavania:
      friendly_name: "Dlzka vysavania"
      value_template: "{{ (( states('sensor.xiaomi_vacuum_cleaner_last_clean_duration')|float(0) ) / 60 ) | round(2) }}"
      unit_of_measurement: 'min' 
      



      
    
        
        
        
      
      
                  
            
      
      
      
      
      

    

        


        
          
          
          
          
          
          
          